services:
  php:
    build:
      context: ./back-end/app
      dockerfile: Dockerfile
    ports:
      - "8000:9000"  # Accès à PHP-FPM (Nginx ou frontend doit le proxy)
    environment:
      APP_ENV: prod
      DATABASE_URL: ${DATABASE_URL}
      MONGODB_URL: ${MONGODB_URL}
      JWT_PASSPHRASE: ${JWT_PASSPHRASE}
      CORS_ALLOW_ORIGIN: ${CORS_ALLOW_ORIGIN}
    volumes:
      - ./back-end/app:/var/www/html:cached   # code source local
      - php_vendor:/var/www/html/vendor       # volume Docker pour vendor (Composer écrit dedans)
      - php_var:/var/www/html/var             # volume Docker pour var
    depends_on:
      - mysql_db
      - mongo
    restart: unless-stopped

  mysql_db:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: ecoride
      MYSQL_USER: anastasia
      MYSQL_PASSWORD: OneLove24!
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 10s
      retries: 5
      timeout: 5s
    restart: unless-stopped

  mongo:
    image: mongo:6.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo_user
      MONGO_INITDB_ROOT_PASSWORD: mongo_password
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--username", "mongo_user", "--password", "mongo_password", "--authenticationDatabase", "admin", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      retries: 5
      timeout: 5s
    restart: unless-stopped

  frontend:
    build:
      context: ./front-end
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - php
    restart: unless-stopped

volumes:
  mysql_data:
  mongo_data:
  php_vendor:
  php_var:
